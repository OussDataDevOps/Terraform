include:
  - template: Terraform/Base.latest.gitlab-ci.yml

stages:
  - destroy
  - validate
  - build
  - deploy

variables:
  TF_ROOT: "ressources/"
  AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  TF_BACKEND_BUCKET: $TF_BACKEND_BUCKET
  TF_BACKEND_KEY: $TF_BACKEND_KEY
  TF_BACKEND_REGION: $TF_BACKEND_REGION
  TF_BACKEND_DYNAMODB_TABLE: $TF_BACKEND_DYNAMODB_TABLE

before_script:
  - cd ${TF_ROOT}
  # - terraform init -backend-config="bucket=$TF_BACKEND_BUCKET" -backend-config="key=$TF_BACKEND_KEY" -backend-config="region=$TF_BACKEND_REGION" -backend-config="dynamodb_table=$TF_BACKEND_DYNAMODB_TABLE"
  - terraform init -reconfigure -backend-config="bucket=$TF_BACKEND_BUCKET" -backend-config="key=$TF_BACKEND_KEY" -backend-config="region=$TF_BACKEND_REGION" -backend-config="dynamodb_table=$TF_BACKEND_DYNAMODB_TABLE"

destroy:
  stage: destroy
  script:
    # - terraform destroy -auto-approve -var "access_key=$AWS_ACCESS_KEY_ID" -var "secret_key=$AWS_SECRET_ACCESS_KEY" -var "region=$AWS_DEFAULT_REGION"
    - terraform destroy -auto-approve -lock=false -var "access_key=$AWS_ACCESS_KEY_ID" -var "secret_key=$AWS_SECRET_ACCESS_KEY" -var "region=$AWS_DEFAULT_REGION"
  when: manual
  environment:
    name: production
    action: stop
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push"'

validate:
  stage: validate
  script:
    - terraform validate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

build:
  stage: build
  script:
    - terraform plan -var "access_key=$AWS_ACCESS_KEY_ID" -var "secret_key=$AWS_SECRET_ACCESS_KEY" -var "region=$AWS_DEFAULT_REGION"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'

deploy:
  stage: deploy
  script:
    - terraform apply -auto-approve -var "access_key=$AWS_ACCESS_KEY_ID" -var "secret_key=$AWS_SECRET_ACCESS_KEY" -var "region=$AWS_DEFAULT_REGION"
  when: manual
  environment:
    name: production
    action: start
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
